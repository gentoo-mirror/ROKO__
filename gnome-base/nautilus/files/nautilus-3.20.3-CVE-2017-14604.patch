diff -Nuar nautilus-3.20.3/libnautilus-private/nautilus-directory-async.c nautilus-3.20.3-fixed/libnautilus-private/nautilus-directory-async.c
--- nautilus-3.20.3/libnautilus-private/nautilus-directory-async.c	2016-08-30 09:04:26.000000000 +0000
+++ nautilus-3.20.3-fixed/libnautilus-private/nautilus-directory-async.c	2017-12-17 15:52:53.520769744 +0000
@@ -31,6 +31,7 @@
 #include "nautilus-global-preferences.h"
 #include "nautilus-link.h"
 #include "nautilus-profile.h"
+#include "nautilus-metadata.h"
 #include <eel/eel-glib-extensions.h>
 #include <gtk/gtk.h>
 #include <libxml/parser.h>
@@ -3229,13 +3230,18 @@
 {
 	GFile *location;
 	gboolean res;
+	g_autofree gchar* trusted = NULL;
 	
 	if (!is_launcher) {
 		return TRUE;
 	}
 	
-	if (nautilus_file_can_execute (file)) {
-		return TRUE;
+	trusted = nautilus_file_get_metadata (file,
+									      NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED,
+										  NULL);
+	if (nautilus_file_can_execute (file) && trusted != NULL)
+	{
+	return TRUE;
 	}
 
 	res = FALSE;
diff -Nuar nautilus-3.20.3/libnautilus-private/nautilus-file-operations.c nautilus-3.20.3-fixed/libnautilus-private/nautilus-file-operations.c
--- nautilus-3.20.3/libnautilus-private/nautilus-file-operations.c	2016-08-30 09:04:26.000000000 +0000
+++ nautilus-3.20.3-fixed/libnautilus-private/nautilus-file-operations.c	2017-12-18 06:06:27.259972191 +0000
@@ -192,10 +192,10 @@
 #define COPY_FORCE _("Copy _Anyway")
 
 static void
-mark_desktop_file_trusted (CommonJob *common,
-			   GCancellable *cancellable,
-			   GFile *file,
-			   gboolean interactive);
+mark_desktop_file_executable (CommonJob    *common,
+                              GCancellable *cancellable,
+                              GFile        *file,
+                              gboolean      interactive);
 
 static gboolean
 is_all_button_text (const char *button_text)
@@ -4699,10 +4699,10 @@
 		if (copy_job->desktop_location != NULL &&
 		    g_file_equal (copy_job->desktop_location, dest_dir) &&
 		    is_trusted_desktop_file (src, job->cancellable)) {
-			mark_desktop_file_trusted (job,
-						   job->cancellable,
-						   dest,
-						   FALSE);
+			mark_desktop_file_executable (job,
+			                              job->cancellable,
+			                              dest,
+			                              FALSE);
 		}
 
 		if (job->undo_info != NULL) {
@@ -6971,9 +6971,9 @@
 }
 
 static void
-mark_trusted_task_done (GObject *source_object,
-                        GAsyncResult *res,
-                        gpointer user_data)
+mark_desktop_file_executable_task_done (GObject      *source_object,
+                                        GAsyncResult *res,
+                                        gpointer      user_data)
 {
 	MarkTrustedJob *job = user_data;
 	
@@ -6990,168 +6990,74 @@
 #define TRUSTED_SHEBANG "#!/usr/bin/env xdg-open\n"
 
 static void
-mark_desktop_file_trusted (CommonJob *common,
-			   GCancellable *cancellable,
-			   GFile *file,
-			   gboolean interactive)
+mark_desktop_file_executable (CommonJob    *common,
+                              GCancellable *cancellable,
+                              GFile        *file,
+                              gboolean      interactive)
 {
-	char *contents, *new_contents;
-	gsize length, new_length;
 	GError *error;
 	guint32 current_perms, new_perms;
 	int response;
 	GFileInfo *info;
 	
  retry:
-	error = NULL;
-	if (!g_file_load_contents (file,
-				  cancellable,
-				  &contents, &length,
-				  NULL, &error)) {
-		if (interactive) {
-			response = run_error (common,
-					      g_strdup (_("Unable to mark launcher trusted (executable)")),
-					      error->message,
-					      NULL,
-					      FALSE,
-					      CANCEL, RETRY,
-					      NULL);
-		} else {
-			response = 0;
-		}
-		
 
-		if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT) {
-			abort_job (common);
-		} else if (response == 1) {
-			goto retry;
-		} else {
-			g_assert_not_reached ();
-		}
-
-		goto out;
-	}
-
-	if (!g_str_has_prefix (contents, "#!")) {
-		new_length = length + strlen (TRUSTED_SHEBANG);
-		new_contents = g_malloc (new_length);
-		
-		strcpy (new_contents, TRUSTED_SHEBANG);
-		memcpy (new_contents + strlen (TRUSTED_SHEBANG),
-			contents, length);
-		
-		if (!g_file_replace_contents (file,
-					      new_contents,
-					      new_length,
-					      NULL,
-					      FALSE, 0,
-					      NULL, cancellable, &error)) {
-			g_free (contents);
-			g_free (new_contents);
-			
-			if (interactive) {
-				response = run_error (common,
-						      g_strdup (_("Unable to mark launcher trusted (executable)")),
-						      error->message,
-						      NULL,
-						      FALSE,
-						      CANCEL, RETRY,
-						      NULL);
-			} else {
-				response = 0;
-			}
-
-			if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT) {
-				abort_job (common);
-			} else if (response == 1) {
-				goto retry;
-			} else {
-				g_assert_not_reached ();
-			}
-			
-			goto out;
-		}
-		g_free (new_contents);
-		
-	}
-	g_free (contents);
-	
-	info = g_file_query_info (file,
-				  G_FILE_ATTRIBUTE_STANDARD_TYPE","
-				  G_FILE_ATTRIBUTE_UNIX_MODE,
-				  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
-				  common->cancellable,
-				  &error);
+	error = NULL;
+    info = g_file_query_info (file,
+                              G_FILE_ATTRIBUTE_STANDARD_TYPE ","
+                              G_FILE_ATTRIBUTE_UNIX_MODE,
+                              G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
+                              common->cancellable,
+                              &error);
+
+    if (info != NULL && g_file_info_has_attribute (info, G_FILE_ATTRIBUTE_UNIX_MODE))
+    {
+        current_perms = g_file_info_get_attribute_uint32 (info, G_FILE_ATTRIBUTE_UNIX_MODE);
+        new_perms = current_perms | S_IXGRP | S_IXUSR | S_IXOTH;
+
+        if (current_perms != new_perms)
+        {
+            g_file_set_attribute_uint32 (file, G_FILE_ATTRIBUTE_UNIX_MODE,
+                                         new_perms, G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
+                                         common->cancellable, &error);
+        }
+    }
 
-	if (info == NULL) {
-		if (interactive) {
-			response = run_error (common,
-					      g_strdup (_("Unable to mark launcher trusted (executable)")),
-					      error->message,
-					      NULL,
-					      FALSE,
-					      CANCEL, RETRY,
-					      NULL);
-		} else {
-			response = 0;
-		}
-		
-		if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT) {
-			abort_job (common);
-		} else if (response == 1) {
-			goto retry;
-		} else {
-			g_assert_not_reached ();
-		}
-		
-		goto out;
-	}
-	
-	
-	if (g_file_info_has_attribute (info, G_FILE_ATTRIBUTE_UNIX_MODE)) {
-		current_perms = g_file_info_get_attribute_uint32 (info, G_FILE_ATTRIBUTE_UNIX_MODE);
-		new_perms = current_perms | S_IXGRP | S_IXUSR | S_IXOTH;
-
-		if ((current_perms != new_perms) &&
-		    !g_file_set_attribute_uint32 (file, G_FILE_ATTRIBUTE_UNIX_MODE,
-						  new_perms, G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
-						  common->cancellable, &error))
-			{
-				g_object_unref (info);
-				
-				if (interactive) {
-					response = run_error (common,
-							      g_strdup (_("Unable to mark launcher trusted (executable)")),
-							      error->message,
-							      NULL,
-							      FALSE,
-							      CANCEL, RETRY,
-							      NULL);
-				} else {
-					response = 0;
-				}
-				
-				if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT) {
-					abort_job (common);
-				} else if (response == 1) {
-					goto retry;
-				} else {
-					g_assert_not_reached ();
-				}
-				
-				goto out;
-			}
-	} 
-	g_object_unref (info);
- out:
-	;
+    if (interactive && error != NULL)
+    {
+        response = run_error (common,
+                              g_strdup (_("Unable to mark launcher trusted (executable)")),
+                              error->message,
+                              NULL,
+                              FALSE,
+                              CANCEL, RETRY,
+                              NULL);
+    }
+    else
+    {
+        response = 0;
+    }
+
+    if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)
+    {
+        abort_job (common);
+    }
+    else if (response == 1)
+    {
+        g_object_unref (info);
+        goto retry;
+    }
+    else
+    {
+        g_assert_not_reached ();
+    }
 }
 
 static void
-mark_trusted_task_thread_func (GTask *task,
-                               gpointer source_object,
-                               gpointer task_data,
-                               GCancellable *cancellable)
+mark_desktop_file_executable_task_thread_func (GTask        *task,
+                                               gpointer      source_object,
+                                               gpointer      task_data,
+                                               GCancellable *cancellable)
 {
 	MarkTrustedJob *job = task_data;
 	CommonJob *common;
@@ -7160,18 +7066,18 @@
 	
 	nautilus_progress_info_start (job->common.progress);
 
-	mark_desktop_file_trusted (common,
-				   cancellable,
-				   job->file,
-				   job->interactive);
+	mark_desktop_file_executable (common,
+	                              cancellable,
+	                              job->file,
+	                              job->interactive);
 }
 
 void
-nautilus_file_mark_desktop_file_trusted (GFile *file,
-					 GtkWindow *parent_window,
-					 gboolean interactive,
-					 NautilusOpCallback done_callback,
-					 gpointer done_callback_data)
+nautilus_file_mark_desktop_file_executable (GFile              *file,
+                                            GtkWindow          *parent_window,
+                                            gboolean            interactive,
+                                            NautilusOpCallback  done_callback,
+                                            gpointer            done_callback_data)
 {
 	GTask *task;
 	MarkTrustedJob *job;
@@ -7182,9 +7088,9 @@
 	job->done_callback = done_callback;
 	job->done_callback_data = done_callback_data;
 
-	task = g_task_new (NULL, NULL, mark_trusted_task_done, job);
+	task = g_task_new (NULL, NULL, mark_desktop_file_executable_task_done, job);
 	g_task_set_task_data (task, job, NULL);
-	g_task_run_in_thread (task, mark_trusted_task_thread_func);
+	g_task_run_in_thread (task, mark_desktop_file_executable_task_thread_func);
 	g_object_unref (task);
 }
 
diff -Nuar nautilus-3.20.3/libnautilus-private/nautilus-file-operations.h nautilus-3.20.3-fixed/libnautilus-private/nautilus-file-operations.h
--- nautilus-3.20.3/libnautilus-private/nautilus-file-operations.h	2016-08-30 09:04:26.000000000 +0000
+++ nautilus-3.20.3-fixed/libnautilus-private/nautilus-file-operations.h	2017-12-18 06:11:56.638407545 +0000
@@ -143,11 +143,11 @@
 					 GtkWindow            *parent_window,
 					 NautilusCopyCallback  done_callback,
 					 gpointer              done_callback_data);
-void nautilus_file_mark_desktop_file_trusted (GFile           *file,
-					      GtkWindow        *parent_window,
-					      gboolean          interactive,
-					      NautilusOpCallback done_callback,
-					      gpointer          done_callback_data);
+void nautilus_file_mark_desktop_file_executable (GFile           *file,
+                                                 GtkWindow        *parent_window,
+                                                 gboolean          interactive,
+                                                 NautilusOpCallback done_callback,
+                                                 gpointer          done_callback_data);
 
 
 #endif /* NAUTILUS_FILE_OPERATIONS_H */
diff -Nuar nautilus-3.20.3/libnautilus-private/nautilus-metadata.c nautilus-3.20.3-fixed/libnautilus-private/nautilus-metadata.c
--- nautilus-3.20.3/libnautilus-private/nautilus-metadata.c	2016-08-30 09:04:26.000000000 +0000
+++ nautilus-3.20.3-fixed/libnautilus-private/nautilus-metadata.c	2017-12-18 06:12:59.140008204 +0000
@@ -52,6 +52,7 @@
   NAUTILUS_METADATA_KEY_CUSTOM_ICON_NAME,
   NAUTILUS_METADATA_KEY_SCREEN,
   NAUTILUS_METADATA_KEY_EMBLEMS,
+  NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED,
   NULL
 };
 
diff -Nuar nautilus-3.20.3/libnautilus-private/nautilus-metadata.h nautilus-3.20.3-fixed/libnautilus-private/nautilus-metadata.h
--- nautilus-3.20.3/libnautilus-private/nautilus-metadata.h	2016-08-30 09:04:26.000000000 +0000
+++ nautilus-3.20.3-fixed/libnautilus-private/nautilus-metadata.h	2017-12-18 06:14:02.981643183 +0000
@@ -68,6 +68,8 @@
 #define NAUTILUS_METADATA_KEY_SCREEN				"screen"
 #define NAUTILUS_METADATA_KEY_EMBLEMS				"emblems"
 
+#define NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED				"trusted"
+
 guint nautilus_metadata_get_id (const char *metadata);
 
 #endif /* NAUTILUS_METADATA_H */
diff -Nuar nautilus-3.20.3/src/nautilus-mime-actions.c nautilus-3.20.3-fixed/src/nautilus-mime-actions.c
--- nautilus-3.20.3/src/nautilus-mime-actions.c	2016-08-30 09:04:26.000000000 +0000
+++ nautilus-3.20.3-fixed/src/nautilus-mime-actions.c	2017-12-18 07:33:31.853839576 +0000
@@ -237,7 +237,6 @@
 #define RESPONSE_RUN 1000
 #define RESPONSE_DISPLAY 1001
 #define RESPONSE_RUN_IN_TERMINAL 1002
-#define RESPONSE_MARK_TRUSTED 1003
 
 #define SILENT_WINDOW_OPEN_LIMIT 5
 #define SILENT_OPEN_LIMIT 5
@@ -1412,28 +1411,48 @@
 	char *uri;
 	GFile *file;
 	
-	switch (response_id) {
-	case RESPONSE_RUN:
+	switch (response_id)
+	{
+		case GTK_RESPONSE_OK:
+		{
+            file = nautilus_file_get_location (parameters->file);
+
+           /* We need to do this in order to prevent malicious desktop files
+            * with the executable bit already set.
+            * See https://bugzilla.gnome.org/show_bug.cgi?id=777991
+            */
+            nautilus_file_set_metadata (parameters->file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED,
+                                        NULL,
+                                        "yes");
+
+            nautilus_file_mark_desktop_file_executable (file,
+                                                        parameters->parent_window,
+                                                        TRUE,
+                                                        NULL, NULL);
+
+            /* Need to force a reload of the attributes so is_trusted is marked
+             * correctly. Not sure why the general monitor doesn't fire in this
+             * case when setting the metadata
+             */
+            nautilus_file_invalidate_all_attributes (parameters->file);
+			
 		screen = gtk_widget_get_screen (GTK_WIDGET (parameters->parent_window));
 		uri = nautilus_file_get_uri (parameters->file);
 		DEBUG ("Launching untrusted launcher %s", uri);
 		nautilus_launch_desktop_file (screen, uri, NULL,
 					      parameters->parent_window);
 		g_free (uri);
-		break;
-	case RESPONSE_MARK_TRUSTED:
-		file = nautilus_file_get_location (parameters->file);
-		nautilus_file_mark_desktop_file_trusted (file,
-							 parameters->parent_window,
-							 TRUE, 
-							 NULL, NULL);
 		g_object_unref (file);
+		}
 		break;
-	default:
+	
+		default:
+		{
 		/* Just destroy dialog */
+		}
 		break;
 	}
-	
+
 	gtk_widget_destroy (GTK_WIDGET (dialog));
 	activate_parameters_desktop_free (parameters);
 }
@@ -1476,16 +1495,14 @@
 			      "text", primary,
 			      "secondary-text", secondary,
 			      NULL);
+
 		gtk_dialog_add_button (GTK_DIALOG (dialog),
-				       _("_Launch Anyway"), RESPONSE_RUN);
+                               _("_Cancel"), GTK_RESPONSE_CANCEL);
+        gtk_dialog_set_default_response (GTK_DIALOG (dialog), GTK_RESPONSE_CANCEL);
 		if (nautilus_file_can_set_permissions (file)) {
 			gtk_dialog_add_button (GTK_DIALOG (dialog),
-					       _("Mark as _Trusted"), RESPONSE_MARK_TRUSTED);
+                                   _("Trust and _Launch"), GTK_RESPONSE_OK);
 		}
-		gtk_dialog_add_button (GTK_DIALOG (dialog),
-				       _("_Cancel"), GTK_RESPONSE_CANCEL);
-		gtk_dialog_set_default_response (GTK_DIALOG (dialog), GTK_RESPONSE_CANCEL);
-
 		g_signal_connect (dialog, "response",
 				  G_CALLBACK (untrusted_launcher_response_callback),
 				  parameters_desktop);

