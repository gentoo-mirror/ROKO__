From 2808f34fd2e71f0bf2f890615a9fd6773739e52a Mon Sep 17 00:00:00 2001
From: "Luke A. Guest" <laguest@archeia.com>
Date: Tue, 24 May 2016 15:14:03 +0100
Subject: [PATCH 3/4] Fixed API changes in the kernel. Should still compile
 with earlier kernels.

---
 amd/amdgpu/amdgpu_display.c             | 10 +++++++++-
 amd/amdgpu/amdgpu_mode.h                |  6 +++++-
 amd/amdgpu/amdgpu_ttm.c                 |  8 ++++++++
 amd/amdgpu/dce_v10_0.c                  | 35 +++++++++++++++++++++++++++++++++
 amd/amdgpu/dce_v11_0.c                  | 35 +++++++++++++++++++++++++++++++++
 amd/amdgpu/dce_v8_0.c                   | 35 +++++++++++++++++++++++++++++++++
 amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c |  8 ++++++++
 amd/dal/amdgpu_dm/amdgpu_dm_types.c     | 27 +++++++++++++++++++++++++
 8 files changed, 162 insertions(+), 2 deletions(-)

diff --git a/amd/amdgpu/amdgpu_display.c b/amd/amdgpu/amdgpu_display.c
index 7441653..330a20c 100644
--- a/amd/amdgpu/amdgpu_display.c
+++ b/amd/amdgpu/amdgpu_display.c
@@ -490,7 +490,11 @@ static const struct drm_framebuffer_funcs amdgpu_fb_funcs = {
 int
 amdgpu_framebuffer_init(struct drm_device *dev,
 			struct amdgpu_framebuffer *rfb,
-			struct drm_mode_fb_cmd2 *mode_cmd,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 4, 0)
+			const struct drm_mode_fb_cmd2 *mode_cmd,
+#else
+			struct drm_mode_fb_cmd2 *mode_cmd)
+#endif
 			struct drm_gem_object *obj)
 {
 	int ret;
@@ -507,7 +511,11 @@ amdgpu_framebuffer_init(struct drm_device *dev,
 static struct drm_framebuffer *
 amdgpu_user_framebuffer_create(struct drm_device *dev,
 			       struct drm_file *file_priv,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 4, 0)
+			       const struct drm_mode_fb_cmd2 *mode_cmd)
+#else
 			       struct drm_mode_fb_cmd2 *mode_cmd)
+#endif
 {
 	struct drm_gem_object *obj;
 	struct amdgpu_framebuffer *amdgpu_fb;
diff --git a/amd/amdgpu/amdgpu_mode.h b/amd/amdgpu/amdgpu_mode.h
index 87b339e..8842761 100644
--- a/amd/amdgpu/amdgpu_mode.h
+++ b/amd/amdgpu/amdgpu_mode.h
@@ -605,7 +605,11 @@ int amdgpu_get_crtc_scanoutpos(struct drm_device *dev, int crtc,
 
 int amdgpu_framebuffer_init(struct drm_device *dev,
 			     struct amdgpu_framebuffer *rfb,
-			     struct drm_mode_fb_cmd2 *mode_cmd,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 4, 0)
+			     const struct drm_mode_fb_cmd2 *mode_cmd,
+#else
+			     struct drm_mode_fb_cmd2 *mode_cmd)
+#endif
 			     struct drm_gem_object *obj);
 
 int amdgpufb_remove(struct drm_device *dev, struct drm_framebuffer *fb);
diff --git a/amd/amdgpu/amdgpu_ttm.c b/amd/amdgpu/amdgpu_ttm.c
index 0e55ac5..1caae5a 100644
--- a/amd/amdgpu/amdgpu_ttm.c
+++ b/amd/amdgpu/amdgpu_ttm.c
@@ -540,8 +540,12 @@ int amdgpu_ttm_tt_get_user_pages(struct ttm_tt *ttm, struct page **pages)
 		list_add(&guptask.list, &gtt->guptasks);
 		spin_unlock(&gtt->guptasklock);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
+		r = get_user_pages(userptr, num_pages, write, 0, p, NULL);
+#else
 		r = get_user_pages(current, current->mm, userptr, num_pages,
 				   write, 0, p, NULL);
+#endif
 
 		spin_lock(&gtt->guptasklock);
 		list_del(&guptask.list);
@@ -617,7 +621,11 @@ static void amdgpu_ttm_tt_unpin_userptr(struct ttm_tt *ttm)
 			set_page_dirty(page);
 
 		mark_page_accessed(page);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
+		put_page(page);
+#else
 		page_cache_release(page);
+#endif
 	}
 
 	sg_free_table(ttm->sg);
diff --git a/amd/amdgpu/dce_v10_0.c b/amd/amdgpu/dce_v10_0.c
index 6fa3262..3765afc 100644
--- a/amd/amdgpu/dce_v10_0.c
+++ b/amd/amdgpu/dce_v10_0.c
@@ -3734,8 +3734,13 @@ static void dce_v10_0_encoder_add(struct amdgpu_device *adev,
 	switch (amdgpu_encoder->encoder_id) {
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+		drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+				 DRM_MODE_ENCODER_DAC, NULL);
+#else
 		drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 				 DRM_MODE_ENCODER_DAC);
+#endif
 		drm_encoder_helper_add(encoder, &dce_v10_0_dac_helper_funcs);
 		break;
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DVO1:
@@ -3745,16 +3750,31 @@ static void dce_v10_0_encoder_add(struct amdgpu_device *adev,
 	case ENCODER_OBJECT_ID_INTERNAL_UNIPHY3:
 		if (amdgpu_encoder->devices & (ATOM_DEVICE_LCD_SUPPORT)) {
 			amdgpu_encoder->rmx_type = RMX_FULL;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+					 DRM_MODE_ENCODER_LVDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 					 DRM_MODE_ENCODER_LVDS);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_lcd_info(amdgpu_encoder);
 		} else if (amdgpu_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT)) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+					 DRM_MODE_ENCODER_DAC, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 					 DRM_MODE_ENCODER_DAC);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_dig_info(amdgpu_encoder);
 		} else {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+					 DRM_MODE_ENCODER_TMDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 					 DRM_MODE_ENCODER_TMDS);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_dig_info(amdgpu_encoder);
 		}
 		drm_encoder_helper_add(encoder, &dce_v10_0_dig_helper_funcs);
@@ -3771,14 +3791,29 @@ static void dce_v10_0_encoder_add(struct amdgpu_device *adev,
 		/* these are handled by the primary encoders */
 		amdgpu_encoder->is_ext_encoder = true;
 		if (amdgpu_encoder->devices & (ATOM_DEVICE_LCD_SUPPORT))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+					 DRM_MODE_ENCODER_LVDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 					 DRM_MODE_ENCODER_LVDS);
+#endif
 		else if (amdgpu_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+					 DRM_MODE_ENCODER_DAC, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 					 DRM_MODE_ENCODER_DAC);
+#endif
 		else
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
+					 DRM_MODE_ENCODER_TMDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v10_0_encoder_funcs,
 					 DRM_MODE_ENCODER_TMDS);
+#endif
 		drm_encoder_helper_add(encoder, &dce_v10_0_ext_helper_funcs);
 		break;
 	}
diff --git a/amd/amdgpu/dce_v11_0.c b/amd/amdgpu/dce_v11_0.c
index 7a5e66e..024732b 100644
--- a/amd/amdgpu/dce_v11_0.c
+++ b/amd/amdgpu/dce_v11_0.c
@@ -3770,8 +3770,13 @@ static void dce_v11_0_encoder_add(struct amdgpu_device *adev,
 	switch (amdgpu_encoder->encoder_id) {
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+		drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+				 DRM_MODE_ENCODER_DAC, NULL);
+#else
 		drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 				 DRM_MODE_ENCODER_DAC);
+#endif
 		drm_encoder_helper_add(encoder, &dce_v11_0_dac_helper_funcs);
 		break;
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DVO1:
@@ -3781,16 +3786,31 @@ static void dce_v11_0_encoder_add(struct amdgpu_device *adev,
 	case ENCODER_OBJECT_ID_INTERNAL_UNIPHY3:
 		if (amdgpu_encoder->devices & (ATOM_DEVICE_LCD_SUPPORT)) {
 			amdgpu_encoder->rmx_type = RMX_FULL;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+					 DRM_MODE_ENCODER_LVDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 					 DRM_MODE_ENCODER_LVDS);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_lcd_info(amdgpu_encoder);
 		} else if (amdgpu_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT)) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+					 DRM_MODE_ENCODER_DAC, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 					 DRM_MODE_ENCODER_DAC);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_dig_info(amdgpu_encoder);
 		} else {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+					 DRM_MODE_ENCODER_TMDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 					 DRM_MODE_ENCODER_TMDS);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_dig_info(amdgpu_encoder);
 		}
 		drm_encoder_helper_add(encoder, &dce_v11_0_dig_helper_funcs);
@@ -3807,14 +3827,29 @@ static void dce_v11_0_encoder_add(struct amdgpu_device *adev,
 		/* these are handled by the primary encoders */
 		amdgpu_encoder->is_ext_encoder = true;
 		if (amdgpu_encoder->devices & (ATOM_DEVICE_LCD_SUPPORT))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+					 DRM_MODE_ENCODER_LVDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 					 DRM_MODE_ENCODER_LVDS);
+#endif
 		else if (amdgpu_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+					 DRM_MODE_ENCODER_DAC, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 					 DRM_MODE_ENCODER_DAC);
+#endif
 		else
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
+					 DRM_MODE_ENCODER_TMDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v11_0_encoder_funcs,
 					 DRM_MODE_ENCODER_TMDS);
+#endif
 		drm_encoder_helper_add(encoder, &dce_v11_0_ext_helper_funcs);
 		break;
 	}
diff --git a/amd/amdgpu/dce_v8_0.c b/amd/amdgpu/dce_v8_0.c
index 7530068..b89320c 100644
--- a/amd/amdgpu/dce_v8_0.c
+++ b/amd/amdgpu/dce_v8_0.c
@@ -3664,8 +3664,13 @@ static void dce_v8_0_encoder_add(struct amdgpu_device *adev,
 	switch (amdgpu_encoder->encoder_id) {
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC1:
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DAC2:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+		drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+				 DRM_MODE_ENCODER_DAC, NULL);
+#else
 		drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 				 DRM_MODE_ENCODER_DAC);
+#endif
 		drm_encoder_helper_add(encoder, &dce_v8_0_dac_helper_funcs);
 		break;
 	case ENCODER_OBJECT_ID_INTERNAL_KLDSCP_DVO1:
@@ -3675,16 +3680,31 @@ static void dce_v8_0_encoder_add(struct amdgpu_device *adev,
 	case ENCODER_OBJECT_ID_INTERNAL_UNIPHY3:
 		if (amdgpu_encoder->devices & (ATOM_DEVICE_LCD_SUPPORT)) {
 			amdgpu_encoder->rmx_type = RMX_FULL;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+					 DRM_MODE_ENCODER_LVDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 					 DRM_MODE_ENCODER_LVDS);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_lcd_info(amdgpu_encoder);
 		} else if (amdgpu_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT)) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+					 DRM_MODE_ENCODER_DAC, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 					 DRM_MODE_ENCODER_DAC);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_dig_info(amdgpu_encoder);
 		} else {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+					 DRM_MODE_ENCODER_TMDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 					 DRM_MODE_ENCODER_TMDS);
+#endif
 			amdgpu_encoder->enc_priv = amdgpu_atombios_encoder_get_dig_info(amdgpu_encoder);
 		}
 		drm_encoder_helper_add(encoder, &dce_v8_0_dig_helper_funcs);
@@ -3701,14 +3721,29 @@ static void dce_v8_0_encoder_add(struct amdgpu_device *adev,
 		/* these are handled by the primary encoders */
 		amdgpu_encoder->is_ext_encoder = true;
 		if (amdgpu_encoder->devices & (ATOM_DEVICE_LCD_SUPPORT))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+					 DRM_MODE_ENCODER_LVDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 					 DRM_MODE_ENCODER_LVDS);
+#endif
 		else if (amdgpu_encoder->devices & (ATOM_DEVICE_CRT_SUPPORT))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+					 DRM_MODE_ENCODER_DAC, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 					 DRM_MODE_ENCODER_DAC);
+#endif
 		else
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
+					 DRM_MODE_ENCODER_TMDS, NULL);
+#else
 			drm_encoder_init(dev, encoder, &dce_v8_0_encoder_funcs,
 					 DRM_MODE_ENCODER_TMDS);
+#endif
 		drm_encoder_helper_add(encoder, &dce_v8_0_ext_helper_funcs);
 		break;
 	}
diff --git a/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c b/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
index 535d5d2..c71dc5f 100644
--- a/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
+++ b/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
@@ -263,11 +263,19 @@ dm_dp_create_fake_mst_encoder(struct amdgpu_connector *connector)
 	encoder = &amdgpu_encoder->base;
 	encoder->possible_crtcs = amdgpu_dm_get_encoder_crtc_mask(adev);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+	drm_encoder_init(
+		dev,
+		&amdgpu_encoder->base,
+		NULL,
+		DRM_MODE_ENCODER_DPMST, NULL);
+#else
 	drm_encoder_init(
 		dev,
 		&amdgpu_encoder->base,
 		NULL,
 		DRM_MODE_ENCODER_DPMST);
+#endif
 
 	drm_encoder_helper_add(encoder, &amdgpu_dm_encoder_helper_funcs);
 
diff --git a/amd/dal/amdgpu_dm/amdgpu_dm_types.c b/amd/dal/amdgpu_dm/amdgpu_dm_types.c
index 023f527..8dc3040 100644
--- a/amd/dal/amdgpu_dm/amdgpu_dm_types.c
+++ b/amd/dal/amdgpu_dm/amdgpu_dm_types.c
@@ -1554,6 +1554,16 @@ int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
 	primary_plane->format_default = true;
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+	res = drm_universal_plane_init(
+		dm->adev->ddev,
+		primary_plane,
+		0,
+		&dm_plane_funcs,
+		rgb_formats,
+		ARRAY_SIZE(rgb_formats),
+		DRM_PLANE_TYPE_PRIMARY, NULL);
+#else
 	res = drm_universal_plane_init(
 		dm->adev->ddev,
 		primary_plane,
@@ -1562,17 +1572,27 @@ int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
 		rgb_formats,
 		ARRAY_SIZE(rgb_formats),
 		DRM_PLANE_TYPE_PRIMARY);
+#endif
 
 	primary_plane->crtc = &acrtc->base;
 
 	drm_plane_helper_add(primary_plane, &dm_plane_helper_funcs);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+	res = drm_crtc_init_with_planes(
+			dm->ddev,
+			&acrtc->base,
+			primary_plane,
+			NULL,
+			&amdgpu_dm_crtc_funcs, NULL);
+#else
 	res = drm_crtc_init_with_planes(
 			dm->ddev,
 			&acrtc->base,
 			primary_plane,
 			NULL,
 			&amdgpu_dm_crtc_funcs);
+#endif
 
 	if (res)
 		goto fail;
@@ -1987,10 +2007,17 @@ int amdgpu_dm_encoder_init(
 {
 	struct amdgpu_device *adev = dev->dev_private;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+	int res = drm_encoder_init(dev,
+				   &aencoder->base,
+				   &amdgpu_dm_encoder_funcs,
+				   DRM_MODE_ENCODER_TMDS, NULL);
+#else
 	int res = drm_encoder_init(dev,
 				   &aencoder->base,
 				   &amdgpu_dm_encoder_funcs,
 				   DRM_MODE_ENCODER_TMDS);
+#endif
 
 	aencoder->base.possible_crtcs = amdgpu_dm_get_encoder_crtc_mask(adev);
 
-- 
2.7.3

